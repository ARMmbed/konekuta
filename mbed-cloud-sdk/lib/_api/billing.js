"use strict";
// ===============================================
// This file is autogenerated - Please do not edit
// Tracks base typescript-fetch mustache 01/02/17
// ===============================================
/**
 * mbed-billing REST API documentation for API-server
 * This document contains the public REST API definitions of the mbed-billing service's API server component.
 *
 * OpenAPI spec version: 1.3.7-SNAPSHOT
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var apiBase_1 = require("../common/apiBase");
var sdkError_1 = require("../common/sdkError");
/**
 * DefaultApi
 */
var DefaultApi = (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Build information
     * Get a full build information of the running system.
     */
    DefaultApi.prototype.publicV1BuildGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/public/v1/build',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Service health
     * Check current service health
     */
    DefaultApi.prototype.publicV1HealthGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/public/v1/health',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * List of accounts
     * Get a list of all accounts.
     */
    DefaultApi.prototype.v1AccountsGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/accounts',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Active devices per account
     * Get active devices for an account with specified from and to timestamp. Can be used to fetch active device data for a single month (full or partial) (for example: between 01.04.2017 00:00:00.000Z (inclusive) - 01.05.2017 00:00:00.000Z (exclusive) or between 15.04.2017 15:00:00.000Z (inclusive) - 15.04.2017 16:00.00.000Z (exclusive)).
     * @param account account id
     * @param from in epoch milliseconds, inclusive.
     * @param to in epoch milliseconds, exclusive. Must be greater than &#39;from&#39; parameter and be on the same calendar month as &#39;from&#39; parameter (can be also the absolute beginning of the next month as this parameter is exclusive).
     */
    DefaultApi.prototype.v1ActivedevicesGet = function (account, from, to, callback) {
        // verify required parameter "account" is set
        if (account === null || account === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'account' missing."));
            }
            return;
        }
        // verify required parameter "from" is set
        if (from === null || from === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'from' missing."));
            }
            return;
        }
        // verify required parameter "to" is set
        if (to === null || to === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'to' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (account !== undefined) {
            queryParameters['account'] = account;
        }
        if (from !== undefined) {
            queryParameters['from'] = from;
        }
        if (to !== undefined) {
            queryParameters['to'] = to;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/activedevices',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Active devices
     * Get active devices for an account in import log
     * @param account account id
     * @param importId import id
     */
    DefaultApi.prototype.v1ImportsActivedevicesGet = function (account, importId, callback) {
        // verify required parameter "account" is set
        if (account === null || account === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'account' missing."));
            }
            return;
        }
        // verify required parameter "importId" is set
        if (importId === null || importId === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'importId' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (account !== undefined) {
            queryParameters['account'] = account;
        }
        if (importId !== undefined) {
            queryParameters['import_id'] = importId;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/imports/activedevices',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Import log
     * Get full import log for a single account.
     * @param account account id
     */
    DefaultApi.prototype.v1ImportsGet = function (account, callback) {
        // verify required parameter "account" is set
        if (account === null || account === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'account' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (account !== undefined) {
            queryParameters['account'] = account;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/imports',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * System metrics
     * Get various internal metrics of the service.
     */
    DefaultApi.prototype.v1MetricsGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/metrics',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Active devices per account in reporting
     * Get active devices for a commercial account with specified month.
     * @param account account id
     * @param month year and month
     */
    DefaultApi.prototype.v1ReportActivedevicesGet = function (account, month, callback) {
        // verify required parameter "account" is set
        if (account === null || account === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'account' missing."));
            }
            return;
        }
        // verify required parameter "month" is set
        if (month === null || month === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'month' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (account !== undefined) {
            queryParameters['account'] = account;
        }
        if (month !== undefined) {
            queryParameters['month'] = month;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/report/activedevices',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Billing report
     * Generate billing report for all commercial accounts.
     * @param month year and month
     * @param format report format
     */
    DefaultApi.prototype.v1ReportGet = function (month, format, callback) {
        // verify required parameter "month" is set
        if (month === null || month === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'month' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (month !== undefined) {
            queryParameters['month'] = month;
        }
        if (format !== undefined) {
            queryParameters['format'] = format;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/report',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Known services
     * Get a full list of known services and when they have last updated data to the system.
     */
    DefaultApi.prototype.v1ServicesGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/services',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Account billing data
     * Get account billing data for one or multiple accounts for a given month.
     * @param month year and month
     * @param account account id
     */
    DefaultApi.prototype.v1StatsGet = function (month, account, callback) {
        // verify required parameter "month" is set
        if (month === null || month === undefined) {
            if (callback) {
                callback(new sdkError_1.SDKError("Required parameter 'month' missing."));
            }
            return;
        }
        var headerParams = {};
        var queryParameters = {};
        if (month !== undefined) {
            queryParameters['month'] = month;
        }
        if (account !== undefined) {
            queryParameters['account'] = account;
        }
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/stats',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    /**
     * Known time series
     * Get a full list of consecutive known time series grouped by service and timestamp.
     */
    DefaultApi.prototype.v1TimeseriesGet = function (callback) {
        var headerParams = {};
        var queryParameters = {};
        var useFormData = false;
        var formParams = {};
        return this.request({
            url: '/v1/timeseries',
            method: 'GET',
            headers: headerParams,
            query: queryParameters,
            useFormData: useFormData,
            formParams: formParams,
            json: true,
        }, callback);
    };
    return DefaultApi;
}(apiBase_1.ApiBase));
exports.DefaultApi = DefaultApi;
